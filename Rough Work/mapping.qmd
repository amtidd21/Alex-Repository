---
title: "Mapping"
author: "Alex Tidd"
format: html
---

```{r}
library(mosaic)
library(tidyverse)
library(here)
library(ggplot2)
library(purrr)
library(vctrs)
library(lubridate)
library(furrr)
library(progressr)
```

changing the function to allow it to compile a master schedule
```{r}
##Function to update rankings
##rating is the variable, ratings is the df.
update_rankings_gd_ha <- function(season, game_date, ratings, k = 100, home_ice = 50, d = 0.5){
  ## Filters schedule to a specific date
  elo_ratings_update <- season |> filter(date == game_date) |>
    ## Joins the Elo ratings from our rating file to the schedule file. Puts updated ratings in the schedule
    left_join(ratings, by = join_by(away_team == Team)) |>
    rename(away_elo = rating) |>  
    ## Updates ratings for home team in the schedule file
    left_join(ratings, by = join_by(home_team == Team)) |>
    rename(home_elo = rating) |>
    ## Creating an away team outcome variable. Opposite of home team or same if tie.
    mutate(outcome_away = abs(outcome - 1)) |> 
    ## Calculating expected outcome variable for home and away team
    mutate(exp_home = 1/(1 + 10^((away_elo - (home_elo + home_ice))/400))) |>
    mutate(exp_away = 1/(1 + 10^(((home_elo + home_ice) - away_elo)/400))) |>
    ## Using expected outcome variable to generate new Elo ratings based on actual outcome and expected outcome
    mutate(elo_new_home = home_elo + k*(outcome - exp_home) + d * score_diff) |>
    mutate(elo_new_home = if_else(elo_new_home < 100,
                                  true = 100,
                                  false = elo_new_home)) |>
    mutate(elo_new_away = away_elo + k*(outcome_away - exp_away) + d * -1 * (score_diff)) |>
    mutate(elo_new_away = if_else(elo_new_away < 100,
                                  true = 100,
                                  false = elo_new_away)) |>
    rename(date_update_rankings = date)
  
  ## Find out which is the right date, select() and relocate(), **DO THIS FIRST**: try renaming date in one of the df to make less confusing (at start).
  ranked_home_gd_ha <- left_join(ratings, elo_ratings_update, by = join_by(Team == home_team)) |>
    relocate(elo_new_home) |>
    mutate(rating = if_else(!is.na(elo_new_home),
                            true = elo_new_home,
                            false = rating)) |>
    select(Team, rating, date_update_rankings)
  
  ratings_new_gd_ha <- left_join(ranked_home_gd_ha, elo_ratings_update, by = join_by(Team == away_team)) |>
    relocate(elo_new_away) |>
    mutate(rating = if_else(!is.na(elo_new_away),
                            true = elo_new_away,
                            false = rating)) |>
    select(Team, rating, date_update_rankings.x) |>
    mutate(date_update_rankings.x = game_date) |>
    rename(date = date_update_rankings.x)
    #fill(date_update_rankings.x, .direction = c("down")) |>
    #fill(date_update_rankings.x, .direction = c("up"))
  
  return(ratings_new_gd_ha)
}

#attempt = update_rankings(schedule, "2025-10-04", X22Rankings, 100)

##loop to get updated weekly ratings
## creating a vector for unique dates in a schedule dataframe
dates_vec <- unique(schedule$date)
## defining what new_rankings is going to be
new_rankings = rankings
## Creating a for loop with the update_rankings function to update rankings up to a specified date
for (i in dates_vec) {
  new_rankings <- update_rankings_gd_ha(season = schedule, game_date = i, ratings = new_rankings, k = 100, home_ice = 50, d = 0.5)
  
}


## Iteration of update function, using a date filter. Old loop can't deal with NA Values

## initialize an empty list

#season = schedule
#end_date = "2025-02-25"
#ratings = X22Rankings
#k = 100

update_rankings_iter_gd_ha <- function(season, end_date, ratings, k, home_ice, d){
  
  new_rankings <- list()
  
  season_cut <- season |> 
    ## Filter by a specified end date to deal with NA values (gmaes that have yet to be played)
    filter(date <= ymd(end_date))
  ## Creating a vector for unique dates in a season
  dates_vector <- unique(season_cut$date)
  ## Defining our rankings within the function
  new_rankings[[1]] <- ratings
  ## Creating a for loop for the function to generate new ratings with the updtae_rankings function
  for (i in 1:length(dates_vector)) {
    new_rankings[[i + 1]] <- update_rankings_gd_ha(season = season_cut, game_date = dates_vector[i], ratings = new_rankings[[i]], k = k, home_ice = home_ice, d = d)
  }
  return(new_rankings)
}

update_rankings_residuals = function(season, end_date, ratings, k, home_ice, d){ 
  
  new_rankings = update_rankings_iter_gd_ha(season = season, end_date = end_date, ratings = ratings, k = k, home_ice = home_ice, d = d)
  
full_rankings = new_rankings |> bind_rows()

lagged_dates = full_rankings |> group_by(date) |>
  summarise(last_date = last(date)) |>
  mutate(lag_date = lag(last_date)) |>
  select(-last_date)

lagged_rankings <- left_join(full_rankings, lagged_dates, join_by(date == lag_date)) |>
  select(-date) |>
  rename(date = date.y)

season = season |>
  mutate(home_elo = NA) |>
  mutate(away_elo = NA)

merged_season_home = left_join(season, lagged_rankings, 
                         by = join_by(date == date, home_team == Team)) |>
  mutate(home_elo = rating) |>
  select(-rating)

merged_season =  left_join(merged_season_home, lagged_rankings,
                         by = join_by(date == date, away_team == Team)) |>
  mutate(away_elo = rating) |>
  select(-rating)

full_season = merged_season |>
  mutate(outcome_away = abs(outcome - 1)) |> 
  ## Calculating expected outcome variable for home and away team
  mutate(exp_home = 1/(1 + 10^((away_elo - (home_elo + home_ice))/400))) |>
  mutate(exp_away = 1/(1 + 10^(((home_elo + home_ice) - away_elo)/400))) |>
    ## Using expected outcome variable to generate new Elo ratings based on actual outcome and expected outcome
  mutate(elo_new_home = home_elo + k*(outcome - exp_home) + d * score_diff) |>
    mutate(elo_new_home = if_else(elo_new_home < 100,
                                  true = 100,
                                  false = elo_new_home)) |>
    mutate(elo_new_away = away_elo + k*(outcome_away - exp_away) + d * -1 * (score_diff)) |>
    mutate(elo_new_away = if_else(elo_new_away < 100,
                                  true = 100,
                                  false = elo_new_away)) |>
  mutate(residual = outcome - exp_home) |>
  mutate(abs_residual = abs(residual))

mean_residual = full_season |> summarise(avg = mean(abs_residual, na.rm = TRUE))

return(pull(mean_residual))
}
```

```{r}
update_rankings_residuals(schedule, "2025-03-25", rankings2324, 10, home_ice = 45, d = 0)
```
boom the function works. Lets map this to get a bunch of different combinations.

Lets optimize with regular season games only.
```{r}
schedule_reg = schedule |> filter(game_type != "Big Ten Tournament") |>
  filter(game_type != "ECAC Tournament") |>
  filter(game_type != "CCHA Tournament") |>
  filter(game_type != "CCHA Tournament") |>
  filter(date < "2025-03-08")
  
```


Mapping
```{r}
## setting up grid of potential k, d, and home ice values
plan(multisession)
handlers("progress")
options(progressr.enable = TRUE)

#k = seq(40, 50, length.out = 10)
#home_ice = seq(60, 70, length.out = 10)
#d = seq(45, 55, length.out = 10)

grid = expand.grid(k = seq(35, 45, length.out = 10), home_ice = seq(50, 60, length.out = 10), d = seq(40, 50, length.out = 10))

mean_residuals = with_progress({future_pmap_dbl(grid, \ (k, home_ice, d) update_rankings_residuals(season = schedule_reg, end_date = "2025-03-25", ratings = rankings2324, k = k, home_ice = home_ice, d = d), .progress = TRUE)})

residual_df <- grid |> mutate(mean_residual = mean_residuals)
residual_df
```

```{r}
optimal = residual_df |> filter(mean_residual == min(mean_residual))
## Going to adjust some parameters. Current best is k = 80, hi = 65, d = 1.5
## k = 51 hi = 64 and d = 12.5 gives a 0.364 mean residual
## BOOM our model is optimized with k = 37.22222, home_ice = 53.33333, d = 40.55556, mean_residual = 0.3515844
```

```{r}
apr_15_ranking = update_rankings_iter_gd_ha(schedule, "2025-04-15", rankings2324, 38.33333, 53.33333, 43.33333)
```

```{r}
apr15_slu = apr_15_ranking |> bind_rows() |>
  filter(Team == "St. Lawrence")

apr15_slu_lagged =  apr15_slu |> group_by(date) |>
  summarise(last_date = last(date)) |>
  mutate(lag_date = lag(last_date)) |>
  select(-last_date)

apr15_slu_full = left_join(apr15_slu, apr15_slu_lagged, join_by(date == lag_date)) |>
  select(-date) |>
  rename(date = date.y)

ggplot(data = apr15_slu_full, aes(x = date,
                                 y = rating)) +
  geom_line()
  
```



