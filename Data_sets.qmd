---
title: "Data Sets"
author: "Alex Tidd"
format: html
---

##Data sets for SYE (Teams+Conference) and my attempt at sraping and tidying.

```{r}
library(tidyverse)
library(rvest)
library(here)
library(lubridate)
library(forcats)
```


```{r}
NCAA_teams <- read_csv("NCAA_teams.csv")
##NCAA Team and conference data set. Teams are encoded exactly as source has them.
```


```{r}
View(NCAA_teams)
```

Data scraping:
```{r}
url_hockey <- "https://www.collegehockeynews.com/schedules/?season=20232024"
tab_hockey <- read_html(url_hockey) |>
  html_nodes("table")
```

```{r}
test1 <- tab_hockey[[1]] |> html_table()
test1
stats_dirty <-test1
stats_dirty
```

Tidying the data set:
```{r}
##Testing out tidying example given by Dr. Higham
regex_date <- "October|November|December|January|February|March|April"
df1 <- tibble(word = c("January 3", "Big Ten", "Penn State", "Ohio State", "February 5"),
             score = c("January 3", "Big Ten", "5", "3", "February 5"))
regex_conference <- "Atlantic Hockey|Big Ten|CCHA|ECAC|Hockey East|NCHC|Ind|Exhibition|Non-Conference"
df2 <- df1 |> mutate(date = if_else(str_detect(word, regex_date),
                                  true = word, false = NA_character_),
                   conference = if_else(str_detect(word, regex_conference),
                                        true = word, false = NA_character_)) 
df_filled1 <- df2 |>
  fill(date, .direction = "down") |>
  fill(conference, .direction = "down") 
df_filled2 <-df_filled1 |>
  filter(!str_detect(word, regex_date) &
           !str_detect(word, regex_conference)) 
```

```{r}
##Trying it out relative to the entire data frame. Using regexs to insert dates and conferences to each cell. Putting NA where neither date or conference show up in X1. 
regex_date <- "October|November|December|January|February|March|April"
regex_conference <- "Atlantic Hockey|Big Ten|CCHA|ECAC|Hockey East|NCHC|Ind|Exhibition|Non-Conference"
stats_regex <- stats_dirty |> mutate(date = if_else(str_detect(X1, regex_date),
                                  true = X1, false = NA_character_),
                                   conference = if_else(str_detect(X1, regex_conference), 
                                           true = X1, false = NA_character_)) 

```


```{r}
##Tiding data frame to fill in date and game type for each cell in dataframe.
stats_filled <-stats_regex |> fill(date, .direction = "down") |>
  fill(conference, .direction = "down") |> select(date, conference, everything())
stats_filled_cleaner <- stats_filled |> filter(!str_detect(X1, regex_date) &
                         !str_detect(X1, regex_conference))
```

```{r}
schedule2324 <- stats_filled_cleaner |> select(date, conference, X1, X2, X3, X4, X5, X6) |>
  slice(-1 , -2) |> rename(game_type = conference, away_team = X1, away_score = X2, location_marker = X3, home_team = X4, home_score = X5, overtime = X6) |> 
  separate(col = date, into = c("weekday", "dm", "y"),
           sep = ", ") |> 
  unite("new_date", c(dm, y),
        sep = " ") |>
  select(-weekday) |>
  mutate(date = mdy(new_date)) |>
  select(-new_date) |> 
  select(date, everything()) |>
  filter(game_type != "Exhibition") |>
  mutate(away_score = as.double(away_score)) |>
  mutate(home_score = as.double(home_score)) |>
  mutate(neutral_site = case_when(location_marker == "vs." ~ 1,
                                  location_marker == "at" ~ 0)) |>
  mutate(neutral_site = as.logical(neutral_site)) |>
  select(-location_marker) |>
  mutate(overtime = case_when(overtime == "" ~ 0,
                              overtime == "ot" ~ 1,
                              overtime == "2ot" ~ 1)) |>
  mutate(overtime = as.logical(overtime)) |>
  filter(!is.na(overtime)) |>
  mutate(score_diff = home_score - away_score) |>
  mutate(outcome = 
           case_when(score_diff == 0 ~ "0.5",
                     score_diff > 0 ~ "1",
                     score_diff < 0 ~ "0")) |>
  mutate(outcome = as.double(outcome))
## created a date variable for game date, game_type character variable to indicate whether game was conference, non-conference ect, created home and away team variables that are categorical along with home and away team scores which are double, lastly created overtime and neutral site logical variable to indicate if game was played at a neutral site (eliminating major effects of being home/away), and an overtime logical variable to indicate whether the game went to over time or not.
```


```{r}
team_filter_df <- stats_filled_cleaner |> select(date, conference, X1, X2, X3, X4, X5, X6) |>
  slice(-1 , -2) |> rename(game_type = conference, away_team = X1, away_score = X2, location_marker = X3, home_team = X4, home_score = X5, overtime = X6) |> 
  separate(col = date, into = c("weekday", "dm", "y"),
           sep = ", ") |> 
  unite("new_date", c(dm, y),
        sep = " ") |>
  select(-weekday) |>
  mutate(date = mdy(new_date)) |>
  select(-new_date) |> 
  select(date, everything()) |>
  filter(away_team != "") |>
  filter(game_type != "Exhibition") |>
  mutate(away_score = as.double(away_score)) |>
  mutate(home_score = as.double(home_score)) |>
  filter(away_team != "") |>
  mutate(neutral_site = case_when(location_marker == "vs." ~ 1,
                                  location_marker == "at" ~ 0)) |>
  mutate(neutral_site = as.logical(neutral_site)) |>
  select(-location_marker) |>
  mutate(overtime = case_when(overtime == "" ~ 0,
                              overtime == "ot" ~ 1,
                              overtime == "2ot" ~ 1)) |>
  mutate(overtime = as.logical(overtime))

```


```{r}
## Here is the tidy dataframe
schedule2324
```


